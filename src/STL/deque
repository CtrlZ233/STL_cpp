#include<stdio.h>
#include<stdlib.h>
#include<iostream>
#include<string>
#include <memory>
#include <cstddef>
#include <stdexcept>
#include <initializer_list>
#include<vector>
using namespace std;

template<typename T>
class MyIterator{
    public:
        T* ptr;
        size_t index;
        
};

template<typename T>
class deque{
    public:
        using value_type = T;
        using iterator = value_type *;
        using size_type = std::size_t;
        
    private:
        value_type * start_ptr;
        value_type * end_ptr;
        vector<value_type *> iter_map;
    public:
        deque(/* args */);
        ~deque();
};

template<typename T>
deque<T>::deque(/* args */){

}

template<typename T>
deque<T>::~deque(){

}
